" Plugins {{{
" -- Config vundle ---------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" My Bundles here:
"
"Plugin 'Lokaltog/vim-easymotion'
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
"Plugin 'L9'
"Plugin 'FuzzyFinder'
"
" -- Distraction-free writing in Vim
Plugin 'junegunn/goyo.vim'
" -- key cheatsheet autogenerated
Plugin 'liuchengxu/vim-which-key'
" -- File management
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'pbogut/fzf-mru.vim'
" Plugin 'minibufexpl.vim'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
" evaluate http://www.vim.org/scripts/script.php?script_id=2050 Lustyjuggler
Plugin 'mhinz/vim-grepper'
Plugin 'tpope/vim-vinegar'
Plugin 'preservim/nerdtree'
" -- Aestethics
Plugin 'Solarized'
Plugin 'Zenburn'
Plugin 'NLKNguyen/papercolor-theme'
" Plugin 'itchyny/lightline.vim'
" Plugin 'taohexxx/lightline-buffer'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'kana/vim-operator-user'
"       Required by: vim-operator-flashy
Plugin 'haya14busa/vim-operator-flashy'
"Plugin 'ntpeters/vim-better-whitespace'
Plugin 'ryanoasis/vim-devicons'
"
" -- Better moves
Plugin 'tComment'
Plugin 'http://github.com/tpope/vim-surround'
Plugin 'Raimondi/delimitMate'
Plugin 'tpope/vim-repeat'
Plugin 'Tabular'
Plugin 'jonhiggs/vim-readline'
Plugin 'mileszs/ack.vim'
Plugin 'tpope/vim-unimpaired'
Plugin 'supertab'
"       Plugin 'Gundo'            " not used anymore
"Plugin 'junegunn/vim-easy-align'
"
" -- Development
" Plugin 'Syntastic'
" Plugin 'SirVer/ultisnips'
" Plugin 'honza/vim-snippets'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'w0rp/ale'
"
" -- Lang specific
Plugin 'https://github.com/hashivim/vim-terraform.git'
Plugin 'git://github.com/sophacles/vim-processing.git'
Plugin 'Glench/Vim-Jinja2-Syntax'
Plugin 'chase/vim-ansible-yaml'
" Plugin 'https://github.com/vim-scripts/haproxy'
" Plugin 'Puppet-Syntax-Highlighting'
" Plugin 'git@github.com:vim-scripts/cisco.vim.git'
" Plugin 'mustache/vim-mustache-handlebars'
Plugin 'davidhalter/jedi-vim'
Plugin 'psf/black'
Plugin 'pedrohdz/vim-yaml-folds'
Plugin 'speshak/vim-cfn'
Plugin 'google/vim-jsonnet'
Plugin 'mboughaba/i3config.vim'
Plugin 'cespare/vim-toml'
Plugin 'NoahTheDuke/vim-just'
"       Plugin 'virtualenv.vim'
Plugin 'cweagans/vim-taskpaper'
Plugin 'wilriker/gcode.vim'
"
" TODO:
"   - evaluate vim-transpose: transpose rows & columns
"   - install matchit
"   - install sensible
"   - restore_view
"   - quickfix: vim-qf, https://github.com/yssl/QFEnter
"   Asynchronous Lint Engine; replaces syntastic
"   - Plugin 'w0rp/ale'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" --------------------------------------------------
" }}}

" General {{{

let mapleader = ' '
let g:mapleader = ' '

filetype on                 " enables filetype detection
filetype plugin on          " enables filetype specific plugins
"filetype plugin indent on

" Highlight end of line whitespace.
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/


augroup misc_filetypes
    autocmd!
    " au FileType puppet  compiler puppet
    au FileType sudoers compiler sudoers
    au FileType eruby   compiler eruby
    " Markdown niceties. Optional.
    au FileType markdown    set ai formatoptions=tcroqn2 comments=n:&gt; tw=79
    au FileType puppet      set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
    au FileType yaml        set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
    au FileType terraform   set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
augroup END
" }}}

" plugin: syntastic {{{
" Set bash as shell; fish is incompatible with Syntastic
set shell=bash

" syntastic: no need to run :Errors to use :lnext/:lprev
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_python_python_exec = '/usr/bin/python3'

let g:session_autosave = 'yes'
let g:session_autosave_periodic = 3
let g:session_autosave_silent = 1
let g:session_command_aliases = 1
" let g:session_persist_globals = ['&makeprg']
" }}}

" plugin: ale {{{
let g:ale_completion_enabled = 1
let g:ale_fix_on_save = 1
let g:ale_set_balloons = 1
let g:ale_fixers = {
\   'python':   ['autopep8', 'isort', 'black', 'remove_trailing_lines', 'trim_whitespace'],
\   'vim':      ['remove_trailing_lines', 'trim_whitespace']
\ }
" }}}

" plugin: vim-which-key {{{
" https://github.com/liuchengxu/vim-which-key
call which_key#register('<Space>', "g:which_key_map")

nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>

" Define prefix dictionary for vim-which-key
let g:which_key_map =  {}

set timeoutlen=500
" }}}

" plugin: lightline {{{
" let g:lightline = {
"       \ 'colorscheme': 'PaperColor',
"       \ 'active': {
"       \   'left': [ [ 'mode', 'paste' ],
"       \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
"       \   'right': [ [ 'lineinfo' ],
"       \              [ 'percent' ],
"       \              [ 'filetype' ] ],
"       \ },
"     \ 'tabline': {
"     \   'left': [ [ 'bufferinfo' ],
"     \             [ 'separator' ],
"     \             [ 'bufferbefore', 'buffercurrent', 'bufferafter' ], ],
"     \   'right': [ [ 'close' ], ],
"     \ },
"     \ 'component_expand': {
"     \   'buffercurrent': 'lightline#buffer#buffercurrent',
"     \   'bufferbefore': 'lightline#buffer#bufferbefore',
"     \   'bufferafter': 'lightline#buffer#bufferafter',
"     \ },
"     \ 'component_type': {
"     \   'buffercurrent': 'tabsel',
"     \   'bufferbefore': 'raw',
"     \   'bufferafter': 'raw',
"     \ },
"     \ 'component_function': {
"     \   'bufferinfo': 'lightline#buffer#bufferinfo',
"       \   'gitbranch': 'fugitive#head'
"     \ },
"     \ 'component': {
"     \   'separator': '',
"     \ },
"       \ }
" " if has('gui_running')
"     let g:lightline.separator = {
"         \   'left': '', 'right': ''
"       \}
" " endif
" " see others: :h g:lightline.colorscheme
"
" set noshowmode        " don't show --INSERT--
" set showtabline=2     " always show tabline
"
"
" " lightline-buffer ui settings
" " replace these symbols with ascii characters if your environment does not support unicode
" let g:lightline_buffer_logo = ' '
" let g:lightline_buffer_readonly_icon = ''
" let g:lightline_buffer_modified_icon = '✭'
" let g:lightline_buffer_git_icon = ' '
" let g:lightline_buffer_ellipsis_icon = '..'
" let g:lightline_buffer_expand_left_icon = '◀ '
" let g:lightline_buffer_expand_right_icon = ' ▶'
" let g:lightline_buffer_active_buffer_left_icon = ''
" let g:lightline_buffer_active_buffer_right_icon = ''
" let g:lightline_buffer_separator_icon = '  '
"
" " enable devicons, only support utf-8
" " require <https://github.com/ryanoasis/vim-devicons>
" let g:lightline_buffer_enable_devicons = 1
"
" " lightline-buffer function settings
" let g:lightline_buffer_show_bufnr = 1
"
" " :help filename-modifiers
" let g:lightline_buffer_fname_mod = ':t'
"
" " hide buffer list
" let g:lightline_buffer_excludes = ['vimfiler']
"
" " max file name length
" let g:lightline_buffer_maxflen = 30
"
" " max file extension length
" let g:lightline_buffer_maxfextlen = 3
"
" " min file name length
" let g:lightline_buffer_minflen = 16
"
" " min file extension length
" let g:lightline_buffer_minfextlen = 3
"
" " reserve length for other component (e.g. info, close)
" let g:lightline_buffer_reservelen = 2
" }}}

" plugin: vim-airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
set noshowmode                                  " don't show --INSERT--
let g:airline_theme='papercolor'
" }}}

" aestethics {{{

" workaround for background color with kitty terminal
let &t_ut=''
set t_Co=256
" set background=light
set background=dark
" colorscheme solarized
colorscheme PaperColor
" colorscheme slate
" mayansmoke only for light background
" colorscheme mayansmoke
set guifont=Hack\ 12


set encoding=utf-8      " Powerline looks better.
set laststatus=2        " Always show statusline.
set lazyredraw          " redraw only when we need to.

set modeline modelines=5  " Look for modelines in first/last 5 lines.

set foldmethod=indent       " Suitable folding for python.
set foldlevel=99

set tabstop=4 shiftwidth=4 softtabstop=4 expandtab  " Python-style tabs.
set autoindent smartindent                          " set smarttab

set formatoptions+=r        " Automatically insert the current comment leader
set formatoptions+=q        " Allow formatting of comments with 'gq'
set formatoptions+=n        " Allow formatting of numbered lists.
set formatprg=par

set hidden                  " Can open new buffers from one with unsaved changes.

set so=7        " Set 7 lines to the cursor - when moving vertically using j/k

set guioptions-=T           " hide toolbar
" }}}

" search {{{
set ignorecase              " Ignore case when searching
set smartcase               " When searching try to be smart about cases
set hlsearch                " Highlight search results
set incsearch               " Incremental search

if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif
" cnoreabbrev ag Ack
" cnoreabbrev aG Ack
" cnoreabbrev Ag Ack
" cnoreabbrev AG Ack

" search for the visual selection
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>
" }}}

" completion {{{
" Word completion for Python.
" augroup python_omnifunc
"     autocmd!
"     au FileType python set omnifunc=pythoncomplete#Complete
" augroup END
" Enable the menu and pydoc preview.
set completeopt=menuone,longest,preview

set updatetime=250
" }}}

" quickfix {{{
" augroup open_cwindow_after_make
"     autocmd!
"     autocmd QuickFixCmdPost * :copen        " Open cwindow after make.
" augroup END

let g:which_key_map.q = {'name' : '+quickfix'}

nnoremap <leader>qh :cprevious<CR>
nnoremap <leader>ql :cnext<CR>
nnoremap <leader>qo :copen<CR>
nnoremap <leader>qc :cclose<CR>
nnoremap <leader>q9 :cfirst<CR>
nnoremap <leader>q0 :clast<CR>
" }}}

" file navigation {{{

set wildmenu                " Turn on the WiLd menu
set wildignore=*.o,*~,*.pyc " Ignore compiled files

let &wildcharm = &wildchar  " Next line requires this to work
" On WiLd menu, ctrl-j enters a directory
cnoremap <C-j> <DOWN>

" CD to the directory where the file in the buffer is.
" nnoremap <leader>cd execute "cd" expand("%:p:h")
" Switch CWD to the directory of the open buffer
nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>
" }}}

" plugin: nerdtree {{{
"let g:nerdtree_tabs_open_on_console_startup = 1
let g:NERDTreeWinPos = "right"

" nerdtree: show hidden files by default
au BufNewFile,BufRead /home/jordif/.dotfiles/ let NERDTreeShowHidden=1
" }}}

" plugin: fzf {{{
nnoremap <leader>fm :FZFMru<CR>
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fb :Buffers<CR>
nnoremap <leader>fa :Ag<CR>

command! Files call fzf#run(fzf#wrap({'source': 'fd --type f --follow ""'}))

" find hidden files'
command! Hidden call fzf#run(fzf#wrap({'source': 'fd --type f --hidden --follow --exclude .git --exclude \'.*.sw?\' ""'}))
map <leader>fh :call fzf#run(fzf#wrap({'source': 'fd --type f --hidden --follow --exclude .git --exclude ".*.sw?" ""'}))<CR>

let g:which_key_map.f = { 'name' : '+find' }
let g:which_key_map.f.h = 'hidden files'
" }}}

" git and plugin: fugitive {{{
map <leader>go :echom system("hub browse -- blob/" . fugitive#head() . "/" . bufname("%") )<CR>
map <leader>gs :Git<CR>
let g:which_key_map.g = {'name' : '+git'}
" }}}

" plugin: operator-flashy {{{
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$
" }}}

" mappings {{{

" iabbrev @@      Jordi Funollet <funollet@fastmail.fm>

" ESC in insert mode
inoremap jk <esc>
" ESC in command mode
cnoremap jk <C-C>
" Note: In command mode mappings to esc run the command for some odd
" historical vi compatibility reason. We use the alternate method of
" existing which is Ctrl-C

" Justify paragraph
" inoremap <leader>q gqip

" C-S-insert pastes from clipboard
inoremap <C-S-Insert> <C-o>"*P

nnoremap <C-PageUp> :bprev<CR>
nnoremap <C-PageDown> :bnext<CR>
nnoremap <leader>bp :bprev<CR>
nnoremap <leader>bn :bnext<CR>
nnoremap <leader>bd :bd<CR>
nnoremap <leader>h :bprev<CR>
nnoremap <leader>l :bnext<CR>
let g:which_key_map.b = {'name' : '+buffers'}

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
" nnoremap <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

let g:pep8_map='<Leader>8'

" Maps for editing ~/.vimrc
nnoremap <leader>ve :e $MYVIMRC<CR>
nnoremap <leader>vs :source $MYVIMRC<CR>
let g:which_key_map.v = {'name' : '+vimrc'}


" ff folds/unfolds.
nnoremap ff za

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" Show next matched string at the center of screen.
" nnoremap n nzz
" nnoremap N Nzz
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z


" Auto completion via ctrl-space (instead of the nasty ctrl-x ctrl-o)
" inoremap <Nul> <C-x><C-o>

" nnoremap <leader>o :Files ~/code/onna/<Return>
command! Hugo :Files $HUGO_CONTENT

" Window navigation.
" Navigate the split view easier by pressing CTRL+j, CTRL+k, CTRL+h, or CTRL+l.
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l


" Toggle line numbers and fold column for easy copying
map <leader>tn :set nonumber!<CR>:set foldcolumn=0<CR>
" Toggle paste mode on and off
map <leader>tp :setlocal paste!<cr>
" Toggle cursorline
nnoremap <leader>tl :set cursorline!<CR>
" Toggle hidden chars.
nnoremap <leader>tl :set list!<CR>
let g:which_key_map.t = {'name' : '+toggle'}

" Grep with motion.
nmap gs  <plug>(GrepperOperator)
xmap gs  <plug>(GrepperOperator)

" Reselect visual selection after indenting
vnoremap < <gv
vnoremap > >gv

nnoremap <leader>n :NERDTreeToggle<CR>
" nnoremap <leader>n :NERDTreeTabsToggle<CR>
let g:which_key_map.n = 'nerdtree'
" }}}


" vim:foldmethod=marker:foldlevel=0
