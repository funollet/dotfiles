" Plugins {{{

" Install vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

" -- key cheatsheet autogenerated
Plug 'liuchengxu/vim-which-key'

" -- File management
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'pbogut/fzf-mru.vim'
" Plugin 'minibufexpl.vim'
Plug 'xolox/vim-misc'
" Plug 'xolox/vim-session'
" evaluate http://www.vim.org/scripts/script.php?script_id=2050 Lustyjuggler
Plug 'mhinz/vim-grepper'
Plug 'tpope/vim-vinegar'
Plug 'preservim/nerdtree'

" -- Aestethics
Plug 'altercation/vim-colors-solarized'
Plug 'jnurmine/Zenburn'
Plug 'NLKNguyen/papercolor-theme'
" Plugin 'itchyny/lightline.vim'
" Plugin 'taohexxx/lightline-buffer'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'kana/vim-operator-user'
"       Required by: vim-operator-flashy
Plug 'haya14busa/vim-operator-flashy'
"Plugin 'ntpeters/vim-better-whitespace'
Plug 'ryanoasis/vim-devicons'
Plug 'psliwka/vim-smoothie'
"
" -- Better moves
Plug 'tpope/vim-sensible'
Plug 'tomtom/tcomment_vim'
Plug 'http://github.com/tpope/vim-surround'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-repeat'
Plug 'godlygeek/tabular'
Plug 'jonhiggs/vim-readline'
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-unimpaired'
Plug 'ervandew/supertab'
"Plugin 'junegunn/vim-easy-align'
"
" -- Development
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'w0rp/ale'
"
" -- Lang specific
Plug 'https://github.com/hashivim/vim-terraform.git'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'chase/vim-ansible-yaml'
" Plugin 'https://github.com/vim-scripts/haproxy'
" Plugin 'Puppet-Syntax-Highlighting'
" Plugin 'git@github.com:vim-scripts/cisco.vim.git'
" Plugin 'mustache/vim-mustache-handlebars'
Plug 'davidhalter/jedi-vim'
Plug 'psf/black'
Plug 'pedrohdz/vim-yaml-folds'
Plug 'speshak/vim-cfn'
Plug 'google/vim-jsonnet'
Plug 'mboughaba/i3config.vim'
Plug 'cespare/vim-toml'
Plug 'NoahTheDuke/vim-just'
"       Plugin 'virtualenv.vim'
Plug 'cweagans/vim-taskpaper'
Plug 'wilriker/gcode.vim'
"
" TODO:
"   - evaluate vim-transpose: transpose rows & columns
"   - install matchit
"   - install sensible
"   - restore_view
"   - quickfix: vim-qf, https://github.com/yssl/QFEnter


" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting
" }}}

" General {{{

let mapleader = ' '
let g:mapleader = ' '

filetype on                 " enables filetype detection
filetype plugin on          " enables filetype specific plugins
"filetype plugin indent on

" Highlight end of line whitespace.
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/


augroup misc_filetypes
    autocmd!
    " au FileType puppet  compiler puppet
    au FileType sudoers compiler sudoers
    au FileType eruby   compiler eruby
    " Markdown niceties. Optional.
    au FileType markdown    set ai formatoptions=tcroqn2 comments=n:&gt; tw=79
    au FileType puppet      set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
    au FileType yaml        set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
    au FileType terraform   set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
augroup END
" }}}

" plugin: ale {{{
let g:ale_completion_enabled = 1
let g:ale_fix_on_save = 1
let g:ale_set_balloons = 1
" \   'python':   ['autopep8', 'isort', 'black', 'remove_trailing_lines', 'trim_whitespace'],
let g:ale_fixers = {
\   'python':   ['autopep8', 'black', 'remove_trailing_lines', 'trim_whitespace'],
\   'vim':      ['remove_trailing_lines', 'trim_whitespace']
\ }
" }}}

" plugin: lightline {{{
" let g:lightline = {
"       \ 'colorscheme': 'PaperColor',
"       \ 'active': {
"       \   'left': [ [ 'mode', 'paste' ],
"       \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
"       \   'right': [ [ 'lineinfo' ],
"       \              [ 'percent' ],
"       \              [ 'filetype' ] ],
"       \ },
"     \ 'tabline': {
"     \   'left': [ [ 'bufferinfo' ],
"     \             [ 'separator' ],
"     \             [ 'bufferbefore', 'buffercurrent', 'bufferafter' ], ],
"     \   'right': [ [ 'close' ], ],
"     \ },
"     \ 'component_expand': {
"     \   'buffercurrent': 'lightline#buffer#buffercurrent',
"     \   'bufferbefore': 'lightline#buffer#bufferbefore',
"     \   'bufferafter': 'lightline#buffer#bufferafter',
"     \ },
"     \ 'component_type': {
"     \   'buffercurrent': 'tabsel',
"     \   'bufferbefore': 'raw',
"     \   'bufferafter': 'raw',
"     \ },
"     \ 'component_function': {
"     \   'bufferinfo': 'lightline#buffer#bufferinfo',
"       \   'gitbranch': 'fugitive#head'
"     \ },
"     \ 'component': {
"     \   'separator': '',
"     \ },
"       \ }
" " if has('gui_running')
"     let g:lightline.separator = {
"         \   'left': '', 'right': ''
"       \}
" " endif
" " see others: :h g:lightline.colorscheme
"
" set noshowmode        " don't show --INSERT--
" set showtabline=2     " always show tabline
"
"
" " lightline-buffer ui settings
" " replace these symbols with ascii characters if your environment does not support unicode
" let g:lightline_buffer_logo = ' '
" let g:lightline_buffer_readonly_icon = ''
" let g:lightline_buffer_modified_icon = '✭'
" let g:lightline_buffer_git_icon = ' '
" let g:lightline_buffer_ellipsis_icon = '..'
" let g:lightline_buffer_expand_left_icon = '◀ '
" let g:lightline_buffer_expand_right_icon = ' ▶'
" let g:lightline_buffer_active_buffer_left_icon = ''
" let g:lightline_buffer_active_buffer_right_icon = ''
" let g:lightline_buffer_separator_icon = '  '
"
" " enable devicons, only support utf-8
" " require <https://github.com/ryanoasis/vim-devicons>
" let g:lightline_buffer_enable_devicons = 1
"
" " lightline-buffer function settings
" let g:lightline_buffer_show_bufnr = 1
"
" " :help filename-modifiers
" let g:lightline_buffer_fname_mod = ':t'
"
" " hide buffer list
" let g:lightline_buffer_excludes = ['vimfiler']
"
" " max file name length
" let g:lightline_buffer_maxflen = 30
"
" " max file extension length
" let g:lightline_buffer_maxfextlen = 3
"
" " min file name length
" let g:lightline_buffer_minflen = 16
"
" " min file extension length
" let g:lightline_buffer_minfextlen = 3
"
" " reserve length for other component (e.g. info, close)
" let g:lightline_buffer_reservelen = 2
" }}}

" plugin: vim-airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
set noshowmode                                  " don't show --INSERT--
let g:airline_theme='papercolor'
" }}}

" aestethics {{{

" workaround for background color with kitty terminal
let &t_ut=''
set t_Co=256
" set background=light
set background=dark
" colorscheme solarized
colorscheme PaperColor
" colorscheme slate
" mayansmoke only for light background
" colorscheme mayansmoke
set guifont=Hack\ 12


set encoding=utf-8      " Powerline looks better.
set laststatus=2        " Always show statusline.
set lazyredraw          " redraw only when we need to.

set modeline modelines=5  " Look for modelines in first/last 5 lines.

set foldmethod=indent       " Suitable folding for python.
set foldlevel=99

set tabstop=4 shiftwidth=4 softtabstop=4 expandtab  " Python-style tabs.
set autoindent smartindent                          " set smarttab

set formatoptions+=r        " Automatically insert the current comment leader
set formatoptions+=q        " Allow formatting of comments with 'gq'
set formatoptions+=n        " Allow formatting of numbered lists.
set formatprg=par

set hidden                  " Can open new buffers from one with unsaved changes.

set so=7        " Set 7 lines to the cursor - when moving vertically using j/k

set guioptions-=T           " hide toolbar
" }}}

" search {{{
set ignorecase              " Ignore case when searching
set smartcase               " When searching try to be smart about cases
set hlsearch                " Highlight search results
set incsearch               " Incremental search

if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif
" cnoreabbrev ag Ack
" cnoreabbrev aG Ack
" cnoreabbrev Ag Ack
" cnoreabbrev AG Ack

" search for the visual selection
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" }}}

" completion {{{
" Word completion for Python.
" augroup python_omnifunc
"     autocmd!
"     au FileType python set omnifunc=pythoncomplete#Complete
" augroup END
" Enable the menu and pydoc preview.
set completeopt=menuone,longest,preview

set updatetime=250
" }}}

" file navigation {{{

set wildmenu                " Turn on the WiLd menu
set wildignore=*.o,*~,*.pyc " Ignore compiled files

let &wildcharm = &wildchar  " Next line requires this to work
" On WiLd menu, ctrl-j enters a directory
cnoremap <C-j> <DOWN>
" }}}

" plugin: nerdtree {{{
"let g:nerdtree_tabs_open_on_console_startup = 1
let g:NERDTreeWinPos = "right"

" nerdtree: show hidden files by default
au BufNewFile,BufRead /home/jordif/.dotfiles/ let NERDTreeShowHidden=1
" }}}

" plugin: fzf {{{
command! Files call  fzf#run(fzf#wrap({'source': 'fd --type f --follow ""'}))
" find hidden files'
command! Hidden call fzf#run(fzf#wrap({'source': 'fd --type f --hidden --follow --exclude .git --exclude ".*.sw?" ""'}))
" }}}

" plugin: operator-flashy {{{
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$
" }}}

" mappings {{{

" ESC in insert mode
inoremap jk <esc>
" ESC in command mode
cnoremap jk <C-C>
" Note: In command mode mappings to esc run the command for some odd
" historical vi compatibility reason. We use the alternate method of
" existing which is Ctrl-C

" C-S-insert pastes from clipboard
inoremap <C-S-Insert> <C-o>"*P

" ff folds/unfolds.
nnoremap ff za

" Show next matched string at the center of screen.
" nnoremap n nzz
" nnoremap N Nzz
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z

command! Hugo :Files $HUGO_CONTENT

" Window navigation.
" Navigate the split view easier by pressing CTRL+j, CTRL+k, CTRL+h, or CTRL+l.
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Grep with motion.
nmap gs  <plug>(GrepperOperator)
xmap gs  <plug>(GrepperOperator)

" Reselect visual selection after indenting
vnoremap < <gv
vnoremap > >gv
" }}}

" plugin: vim-which-key {{{
call which_key#register('<Space>', "g:which_key_map")
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
set timeoutlen=500

" Define prefix dictionary for vim-which-key
let g:which_key_map =  {}
let g:which_key_map.b = {'name' : '+buffers'}
let g:which_key_map.f = {'name' : '+find'}
let g:which_key_map.f.v = {'name' : '+vimrc'}
let g:which_key_map.g = {'name' : '+git'}
let g:which_key_map.q = {'name' : '+quickfix'}
let g:which_key_map.s = {'name' : '+search'}
let g:which_key_map.t = {'name' : '+toggle'}


nnoremap <leader>h :bprev<CR>
nnoremap <leader>l :bnext<CR>


nnoremap <leader>bp :bprev<CR>
nnoremap <leader>bn :bnext<CR>
nnoremap <leader>bd :bd<CR>

nnoremap <leader>fa :Ag<CR>
nnoremap <leader>fb :Buffers<CR>
nnoremap <leader>ff :Files<CR>
     map <leader>fh :Hidden<CR>
nnoremap <leader>fm :FZFMru<CR>
nnoremap <leader>ft :NERDTreeToggle<CR>
nnoremap <leader>fT :NERDTree<CR>
" Maps for editing ~/.vimrc
nnoremap <leader>fve :e $MYVIMRC<CR>
nnoremap <leader>fvs :source $MYVIMRC<CR>


map <leader>go :echom system("hub browse -- blob/" . fugitive#head() . "/" . bufname("%") )<CR>
map <leader>gs :Git<CR>

nnoremap <leader>qh :cprevious<CR>
nnoremap <leader>ql :cnext<CR>
nnoremap <leader>qo :copen<CR>
nnoremap <leader>qc :cclose<CR>
nnoremap <leader>q9 :cfirst<CR>
nnoremap <leader>q0 :clast<CR>


" Toggle line numbers and fold column for easy copying
map      <leader>tn :set nonumber!<CR>:set foldcolumn=0<CR>
" Toggle paste mode on and off
map      <leader>tp :setlocal paste!<cr>
" Toggle cursorline
nnoremap <leader>tl :set cursorline!<CR>
" Toggle hidden chars.
nnoremap <leader>tl :set list!<CR>


" nnoremap <leader>o :Files ~/code/onna/<Return>
"
" CD to the directory where the file in the buffer is.
" nnoremap <leader>cd execute "cd" expand("%:p:h")
" Switch CWD to the directory of the open buffer
" nnoremap <leader>cd :cd %:p:h<cr>:pwd<cr>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
" nnoremap <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
" }}}

" vim: foldmethod=marker:foldlevel=0
